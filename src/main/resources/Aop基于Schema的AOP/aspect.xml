<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 目标对象 -->
    <bean id="cat" class="Aop基于Schema的AOP.Cat"/>

    <!-- 切面类-->
    <bean id="catAspect" class="Aop基于Schema的AOP.CatAspect"/>

    <!--AOP配置（一）-->
    <!--AOP配置（一）proxy-target-class false为jdk动态代理，true为cglib增强子类代理-->
    <aop:config proxy-target-class="false">
        <!-- 切入点-->
        <!-- args(name,age)、args(name)指定作用的方法的参数列表，这里定义了2个切点，分别对应sayHello()和sayException()-->
        <aop:pointcut id="pointcut" expression="execution(* Aop基于Schema的AOP..*.*(..)) and args(name,age)"/>
        <aop:pointcut id="pointcut1" expression="execution(* Aop基于Schema的AOP.Cat.sayException(..)) and args(name)"/>
        <aop:aspect ref="catAspect" order="0">
            <!--前置增强，在切入点选择的方法之前执行-->
            <aop:before method="beforeAdvice" pointcut-ref="pointcut" arg-names="name,age"/>
            <!--后置异常增强，在切入点选择的方法抛出异常时执行-->
            <!-- 这里为了避免环绕增强覆盖后置异常增强，所以使用了不一样的切点，以查看此切面的效果。 throwing属性是指代抛出的异常，arg-names是切面的方法参数，其中name必须带上，切面的方法参数必须加上切点绑定的方法参数args(name)-->
            <aop:after-throwing method="afterExceptionAdvice" pointcut-ref="pointcut1" throwing="ex" arg-names="ex,name"/>
            <!--后置返回增强，在切入点选择的方法正常返回时执行-->
            <aop:after-returning method="afterReturningAdvice" pointcut-ref="pointcut" arg-names="name,age"/>
            <!--后置最终增强，在切入点选择的方法返回时执行，不管是正常返回还是抛出异常都执行-->
            <aop:after method="afterAdvice" pointcut-ref="pointcut" arg-names="name,age"/>
            <!--
                环绕增强，环绕着在切入点选择的连接点处的方法所执行的通知，可以决定目标方法是否执行，
                什么时候执行，执行时是否需要替换方法参数，执行完毕是否需要替换返回值
            -->
            <aop:around method="roundAdvice" pointcut-ref="pointcut" arg-names="p,name,age"/>

            <!--引入
                  1、types-matching：匹配需要引入接口的目标对象的AspectJ语法类型表达式。
                  2、implement-interface：定义需要引入的接口。
                  3、default-impl和delegate-ref：定义引入接口的默认实现，二者选一，
                  default-impl是接口的默认实现类全限定名，而delegate-ref是默认的实现的委托Bean名。
            -->
            <aop:declare-parents types-matching="Aop基于Schema的AOP.Cat"
                                 implement-interface="Aop基于Schema的AOP.IIntroduce"
                                 default-impl="Aop基于Schema的AOP.IntroduceImpl"/>

        </aop:aspect>
    </aop:config>
</beans>